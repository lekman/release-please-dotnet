#!/bin/bash

# Function to install xmlstarlet
install_xmlstarlet() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    sudo apt-get update
    sudo apt-get install -y xmlstarlet
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    brew install xmlstarlet
  else
    echo "::error Unsupported OS type: $OSTYPE" >> $GITHUB_STEP_SUMMARY
    exit 1
  fi
}

# Function to install xmllint
install_xmllint() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    sudo apt-get update
    sudo apt-get install -y libxml2-utils
  fi
}

# Check if xmlstarlet is installed, if not, install it
if ! command -v xmlstarlet &> /dev/null
then
    echo "xmlstarlet could not be found, installing..."
    install_xmlstarlet
fi

# Check if xmllint is installed, if not, install it
if ! command -v xmllint &> /dev/null
then
    echo "xmllint could not be found, installing..."
    install_xmllint
fi

# Check if gpr tool is installed, if not, install it
if ! command -v gpr &> /dev/null
then
    echo "gpr tool could not be found, installing..."
    dotnet tool install --global --verbosity minimal --no-cache gpr
fi

# Ensure NUGET_API_KEY exists
if [ -z "$NUGET_API_KEY" ]; then
  echo "::error NUGET_API_KEY is not set. Exiting..." >> $GITHUB_STEP_SUMMARY
  exit 1
fi

# Function to get the organization owner using GitHub CLI
get_org_owner() {
  local org_owner=$(gh repo view --json owner -q .owner.login)
  echo "$org_owner"
}

# Function to construct the NuGet source URL from the repository URL
construct_nuget_source_url() {
  local repo_url=$1
  local nuget_source_url=${repo_url/github.com/nuget.pkg.github.com}
  nuget_source_url="${nuget_source_url%.git}/index.json"
  echo "$nuget_source_url"
}

MANIFEST_FILE="../.release-please-manifest.json"
MANIFEST=$(cat $MANIFEST_FILE)

# Detect if no package paths are found in the manifest file
if [ $(echo "$MANIFEST" | jq 'keys | length') -eq 0 ]; then
  echo "::warning No package paths found in the manifest file: $MANIFEST_FILE"
fi

# Function to update the version in the csproj file
update_csproj_version() {
  local csproj_path=$1
  local new_version=$2

  if [ -f "$csproj_path" ]; then
    current_version=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" "$csproj_path")
    if [ "$current_version" != "$new_version" ]; then
      xmlstarlet ed -L -u "//Project/PropertyGroup/Version" -v "$new_version" "$csproj_path"
      return 0
    fi
  else
    echo "CSPROJ file not found: $csproj_path"
    return 1
  fi
}

# Function to remove the XML prolog from the csproj file which is generated by xmlstarlet
remove_xml_prolog() {
  local csproj_path=$1

  if [ -f "$csproj_path" ]; then
    first_line=$(head -n 1 "$csproj_path")
    if [[ $first_line == "<?xml version=\"1.0\"?>" ]]; then
      tail -n +2 "$csproj_path" > "$csproj_path.tmp" && mv "$csproj_path.tmp" "$csproj_path"
      return 0
    fi
  else
    echo "::error CSPROJ file not found: $csproj_path" >> $GITHUB_STEP_SUMMARY
    return 1
  fi
}

## Function to check if a specific version of a package is already deployed using GitHub CLI
is_package_version_deployed() {
  local owner=$1
  local repo=$2
  local package_name=$3
  local package_version=$4
  local token=$5

  # NOTE: If the owner does not contain "ikea", then it is a private user, and string should be "user",
  # if not then orgs/${owner}. This is used for debugging
  local target="user"
  if [[ $(echo "$owner" | tr '[:upper:]' '[:lower:]') == *"ikea"* ]]; then
    target="orgs/${owner}"
  fi

  # Get the list of package versions using GitHub CLI
  local versions=$(gh api --paginate "/${target}/packages/nuget/${package_name}/versions" -q '.[] | .name' | sort -V)
  for version in $versions; do
    if [[ "$version" == "$package_version" ]]; then
      return 0
    fi
  done

  return 1
}

# Function to get the repository URL from the csproj file
get_repository_url_from_csproj() {
  local csproj_path=$1
  local repo_url=$(xmllint --xpath "string(//Project/PropertyGroup/RepositoryUrl)" "$csproj_path")
  echo "$repo_url"
}

# Function to extract owner and repo from the repository URL
extract_owner_and_repo() {
  local repo_url=$1
  local owner=$(echo "$repo_url" | awk -F'/' '{print $(NF-1)}')
  local repo=$(echo "$repo_url" | awk -F'/' '{print $NF}' | sed 's/.git$//')
  echo "$owner $repo"
}

# Function to publish the NuGet package
publish_nuget_package() {
  local csproj_path=$1
  local project_name=$(basename "$csproj_path" .csproj)
  local repo_url=$(get_repository_url_from_csproj "$csproj_path")
  local nuget_source_url=$(construct_nuget_source_url "$repo_url")
  local project_path=$(dirname "$csproj_path")

  dotnet pack "$csproj_path" -c Release -o ./nupkgs --verbosity minimal

  # Fail process if no files generated
  if [ ! -f ./nupkgs/**.nupkg ]; then
    echo "::error No NuGet package found in the output directory: ./nupkgs" >> $GITHUB_STEP_SUMMARY
    exit 1
  fi

  gpr push \
      --api-key $NUGET_API_KEY \
      --repository $repo_url \
      --retries 3 \
      "./nupkgs"/**.nupkg

  echo "::notice Successfully published NuGet package for $project_name" >> $GITHUB_STEP_SUMMARY

  rm -r -f ./nupkgs
}

# Main loop to update the versions in the csproj files and publish the NuGet package
for package_path in $(echo "$MANIFEST" | jq -r 'keys[]'); do

  # Set version, project path, repo url, nuget source url, and package id
  new_version=$(echo "$MANIFEST" | jq -r --arg path "$package_path" '.[$path]')
  csproj_path="../$package_path/$(basename $package_path).csproj"
  repo_url=$(get_repository_url_from_csproj "$csproj_path")
  nuget_source_url=$(construct_nuget_source_url "$repo_url")
  package_id=$(xmllint --xpath "string(//Project/PropertyGroup/PackageId)" "$csproj_path")

  # Extract owner and repo from the repository URL
  read owner repo <<< $(extract_owner_and_repo "$repo_url")

   # Check if the package version is already deployed
  if is_package_version_deployed "$owner" "$repo" "$package_id" "$new_version" "$GITHUB_TOKEN"; then
    echo "Skipping build and deployment for $package_id version $new_version."
    continue
  fi

  echo "Building and deploying $package_id version $new_version..."
  update_csproj_version "$csproj_path" "$new_version" && \
  remove_xml_prolog "$csproj_path" && \
  publish_nuget_package "$csproj_path"

done
