#!/bin/bash

manifest="$1"
branch_name="$2"

# Function to remove the XML prolog from the csproj file which is generated by xmlstarlet
remove_xml_prolog() {
  local csproj_path=$1

  if [ -f "$csproj_path" ]; then
    first_line=$(head -n 1 "$csproj_path")
    if [[ $first_line == "<?xml version=\"1.0\"?>" ]]; then
      tail -n +2 "$csproj_path" > "$csproj_path.tmp" && mv "$csproj_path.tmp" "$csproj_path"
      return 0
    fi
  else
    echo "::error CSPROJ file not found: $csproj_path" >> $GITHUB_STEP_SUMMARY
    return 1
  fi
}

# Function to update the version in the csproj file
update_csproj_version() {
  local csproj_path=$1
  local new_version=$2

  if [ -f "$csproj_path" ]; then
    current_version=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" "$csproj_path")
    if [ "$current_version" != "$new_version" ]; then
      xmlstarlet ed -L -u "//Project/PropertyGroup/Version" -v "$new_version" "$csproj_path"
      return 0
    fi
  else
    echo "CSPROJ file not found: $csproj_path"
    return 1
  fi
}

# Check if the manifest file exists
if [ ! -f "$manifest" ]; then
    echo "Error: Manifest file not specified or does not exist."
    exit 1
fi

# Read the manifest file packages
manifest_content=$(cat "$manifest")
jq -r 'to_entries[] | "\(.key) \(.value)"' "$manifest" | while read -r project version; do
  echo "Project: $project, Version: $version"
  
  # Locate the project file
  project_file=$(find . -name "$project.csproj" -print -quit)

  # Check if the project file was found
  if [ -z "$project_file" ]; then
    echo "Warning: Project file '$project.csproj' not found."
    continue
  fi

  echo "Found project file: $project_file"

  # Update the version and remove the XML prolog
  update_csproj_version "$project_file" "$version"
  remove_xml_prolog "$project_file"

  # Update git configuration as GitHub Actions bot
  git config --global user.name "github-actions[bot]"
  git config --global user.email "github-actions[bot]@users.noreply.github.com"

  git checkout -b "$branch_name"

  # Detect if any changes were made to the .csproj file
  if ! git diff --quiet "$project_file"; then
    # Stage the changes
    git add "$project_file"

    # Commit changes with a comment
    git commit -m "chore: bump $project to $version"
    
    # Push the changes to the branch
    git push origin "$branch_name"
  else
    echo "No changes detected in $project_file"
  fi
done